/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    tools: Tool;
    courses: Course;
    topics: Topic;
    modules: Module;
    lessons: Lesson;
    quizzes: Quiz;
    questions: Question;
    answers: Answer;
    submissions: Submission;
    submission_answers: SubmissionAnswer;
    enrollments: Enrollment;
    progress: Progress;
    skills: Skill;
    user_skills: UserSkill;
    badges: Badge;
    user_badges: UserBadge;
    achievements: Achievement;
    user_achievements: UserAchievement;
    discussion_threads: DiscussionThread;
    discussion_posts: DiscussionPost;
    activity_logs: ActivityLog;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    tools: ToolsSelect<false> | ToolsSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    topics: TopicsSelect<false> | TopicsSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    quizzes: QuizzesSelect<false> | QuizzesSelect<true>;
    questions: QuestionsSelect<false> | QuestionsSelect<true>;
    answers: AnswersSelect<false> | AnswersSelect<true>;
    submissions: SubmissionsSelect<false> | SubmissionsSelect<true>;
    submission_answers: SubmissionAnswersSelect<false> | SubmissionAnswersSelect<true>;
    enrollments: EnrollmentsSelect<false> | EnrollmentsSelect<true>;
    progress: ProgressSelect<false> | ProgressSelect<true>;
    skills: SkillsSelect<false> | SkillsSelect<true>;
    user_skills: UserSkillsSelect<false> | UserSkillsSelect<true>;
    badges: BadgesSelect<false> | BadgesSelect<true>;
    user_badges: UserBadgesSelect<false> | UserBadgesSelect<true>;
    achievements: AchievementsSelect<false> | AchievementsSelect<true>;
    user_achievements: UserAchievementsSelect<false> | UserAchievementsSelect<true>;
    discussion_threads: DiscussionThreadsSelect<false> | DiscussionThreadsSelect<true>;
    discussion_posts: DiscussionPostsSelect<false> | DiscussionPostsSelect<true>;
    activity_logs: ActivityLogsSelect<false> | ActivityLogsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName: string;
  lastName: string;
  role: 'student' | 'instructor' | 'admin';
  status: 'active' | 'inactive' | 'suspended';
  profilePicture?: (number | null) | Media;
  bio?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tools".
 */
export interface Tool {
  id: number;
  name: string;
  description: string;
  updatedAt: string;
  createdAt: string;
  url: string;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  courseTitle: string;
  courseDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  courseLevel?: ('Beginner' | 'Intermediate' | 'Advanced') | null;
  topic: string;
  instructor: number | User;
  status?: ('published' | 'retired') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics".
 */
export interface Topic {
  id: number;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: number;
  moduleTitle: string;
  moduleDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  orderIndex: number;
  course: number | Course;
  topics?: (number | Topic)[] | null;
  skillsXP?:
    | {
        skill: number | Skill;
        xp: number;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skills".
 */
export interface Skill {
  id: number;
  name: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  icon?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: number;
  lessonTitle: string;
  lessonContent: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  lessonType?: ('video' | 'text' | 'interactive' | 'lab') | null;
  orderIndex: number;
  module: number | Module;
  resources?:
    | {
        resourceTitle?: string | null;
        resourceType?: ('pdf' | 'link' | 'document' | 'tool' | 'code_sample') | null;
        resourceURL?: string | null;
        resourceFile?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quizzes".
 */
export interface Quiz {
  id: number;
  module: number | Module;
  quizTitle: string;
  quizDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions".
 */
export interface Question {
  id: number;
  quiz: number | Quiz;
  questionText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  questionType?: ('multiple_choice' | 'true_false' | 'fill_in_blank' | 'short_answer' | 'code_challenge') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "answers".
 */
export interface Answer {
  id: number;
  question: number | Question;
  answerText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  isCorrect?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions".
 */
export interface Submission {
  id: number;
  user: number | User;
  quiz: number | Quiz;
  submissionDate: string;
  score?: number | null;
  attemptNumber?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submission_answers".
 */
export interface SubmissionAnswer {
  id: number;
  userAnswerText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments".
 */
export interface Enrollment {
  id: number;
  user: number | User;
  course: number | Course;
  enrollmentDate: string;
  status: 'active' | 'completed';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress".
 */
export interface Progress {
  id: number;
  user: number | User;
  lesson: number | Lesson;
  isCompleted?: boolean | null;
  completionDate?: string | null;
  timeSpent?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_skills".
 */
export interface UserSkill {
  id: number;
  user: number | User;
  skill: number | Skill;
  xp: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badges".
 */
export interface Badge {
  id: number;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  icon?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_badges".
 */
export interface UserBadge {
  id: number;
  user: number | User;
  badge: number | Badge;
  earnedDate?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements".
 */
export interface Achievement {
  id: number;
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  criteria: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_achievements".
 */
export interface UserAchievement {
  id: number;
  user: number | User;
  achievement: number | Achievement;
  earnedDate?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion_threads".
 */
export interface DiscussionThread {
  id: number;
  module: number | Module;
  user: number | User;
  threadTitle: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion_posts".
 */
export interface DiscussionPost {
  id: number;
  thread: number | DiscussionThread;
  user: number | User;
  postContent: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  likes?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity_logs".
 */
export interface ActivityLog {
  id: number;
  user?: (number | null) | User;
  actionType: string;
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'tools';
        value: number | Tool;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'topics';
        value: number | Topic;
      } | null)
    | ({
        relationTo: 'modules';
        value: number | Module;
      } | null)
    | ({
        relationTo: 'lessons';
        value: number | Lesson;
      } | null)
    | ({
        relationTo: 'quizzes';
        value: number | Quiz;
      } | null)
    | ({
        relationTo: 'questions';
        value: number | Question;
      } | null)
    | ({
        relationTo: 'answers';
        value: number | Answer;
      } | null)
    | ({
        relationTo: 'submissions';
        value: number | Submission;
      } | null)
    | ({
        relationTo: 'submission_answers';
        value: number | SubmissionAnswer;
      } | null)
    | ({
        relationTo: 'enrollments';
        value: number | Enrollment;
      } | null)
    | ({
        relationTo: 'progress';
        value: number | Progress;
      } | null)
    | ({
        relationTo: 'skills';
        value: number | Skill;
      } | null)
    | ({
        relationTo: 'user_skills';
        value: number | UserSkill;
      } | null)
    | ({
        relationTo: 'badges';
        value: number | Badge;
      } | null)
    | ({
        relationTo: 'user_badges';
        value: number | UserBadge;
      } | null)
    | ({
        relationTo: 'achievements';
        value: number | Achievement;
      } | null)
    | ({
        relationTo: 'user_achievements';
        value: number | UserAchievement;
      } | null)
    | ({
        relationTo: 'discussion_threads';
        value: number | DiscussionThread;
      } | null)
    | ({
        relationTo: 'discussion_posts';
        value: number | DiscussionPost;
      } | null)
    | ({
        relationTo: 'activity_logs';
        value: number | ActivityLog;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  status?: T;
  profilePicture?: T;
  bio?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tools_select".
 */
export interface ToolsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  courseTitle?: T;
  courseDescription?: T;
  courseLevel?: T;
  topic?: T;
  instructor?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics_select".
 */
export interface TopicsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  moduleTitle?: T;
  moduleDescription?: T;
  orderIndex?: T;
  course?: T;
  topics?: T;
  skillsXP?:
    | T
    | {
        skill?: T;
        xp?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  lessonTitle?: T;
  lessonContent?: T;
  lessonType?: T;
  orderIndex?: T;
  module?: T;
  resources?:
    | T
    | {
        resourceTitle?: T;
        resourceType?: T;
        resourceURL?: T;
        resourceFile?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "quizzes_select".
 */
export interface QuizzesSelect<T extends boolean = true> {
  module?: T;
  quizTitle?: T;
  quizDescription?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions_select".
 */
export interface QuestionsSelect<T extends boolean = true> {
  quiz?: T;
  questionText?: T;
  questionType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "answers_select".
 */
export interface AnswersSelect<T extends boolean = true> {
  question?: T;
  answerText?: T;
  isCorrect?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions_select".
 */
export interface SubmissionsSelect<T extends boolean = true> {
  user?: T;
  quiz?: T;
  submissionDate?: T;
  score?: T;
  attemptNumber?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submission_answers_select".
 */
export interface SubmissionAnswersSelect<T extends boolean = true> {
  userAnswerText?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments_select".
 */
export interface EnrollmentsSelect<T extends boolean = true> {
  user?: T;
  course?: T;
  enrollmentDate?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress_select".
 */
export interface ProgressSelect<T extends boolean = true> {
  user?: T;
  lesson?: T;
  isCompleted?: T;
  completionDate?: T;
  timeSpent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skills_select".
 */
export interface SkillsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_skills_select".
 */
export interface UserSkillsSelect<T extends boolean = true> {
  user?: T;
  skill?: T;
  xp?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badges_select".
 */
export interface BadgesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_badges_select".
 */
export interface UserBadgesSelect<T extends boolean = true> {
  user?: T;
  badge?: T;
  earnedDate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements_select".
 */
export interface AchievementsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  criteria?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_achievements_select".
 */
export interface UserAchievementsSelect<T extends boolean = true> {
  user?: T;
  achievement?: T;
  earnedDate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion_threads_select".
 */
export interface DiscussionThreadsSelect<T extends boolean = true> {
  module?: T;
  user?: T;
  threadTitle?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discussion_posts_select".
 */
export interface DiscussionPostsSelect<T extends boolean = true> {
  thread?: T;
  user?: T;
  postContent?: T;
  likes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activity_logs_select".
 */
export interface ActivityLogsSelect<T extends boolean = true> {
  user?: T;
  actionType?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}